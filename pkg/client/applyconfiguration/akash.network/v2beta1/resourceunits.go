/*
Copyright The Akash Network Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2beta1

// ResourceUnitsApplyConfiguration represents a declarative configuration of the ResourceUnits type for use
// with apply.
type ResourceUnitsApplyConfiguration struct {
	CPU     *uint32                                    `json:"cpu,omitempty"`
	Memory  *string                                    `json:"memory,omitempty"`
	Storage []ManifestServiceStorageApplyConfiguration `json:"storage,omitempty"`
}

// ResourceUnitsApplyConfiguration constructs a declarative configuration of the ResourceUnits type for use with
// apply.
func ResourceUnits() *ResourceUnitsApplyConfiguration {
	return &ResourceUnitsApplyConfiguration{}
}

// WithCPU sets the CPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CPU field is set to the value of the last call.
func (b *ResourceUnitsApplyConfiguration) WithCPU(value uint32) *ResourceUnitsApplyConfiguration {
	b.CPU = &value
	return b
}

// WithMemory sets the Memory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Memory field is set to the value of the last call.
func (b *ResourceUnitsApplyConfiguration) WithMemory(value string) *ResourceUnitsApplyConfiguration {
	b.Memory = &value
	return b
}

// WithStorage adds the given value to the Storage field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Storage field.
func (b *ResourceUnitsApplyConfiguration) WithStorage(values ...*ManifestServiceStorageApplyConfiguration) *ResourceUnitsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStorage")
		}
		b.Storage = append(b.Storage, *values[i])
	}
	return b
}
